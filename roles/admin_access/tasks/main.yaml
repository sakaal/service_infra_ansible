# file: roles/admin_access/tasks/main.yaml
#
# The administrative access role enables configuration management access.
#
---

#
# Set all the following variables in file:
# com.example_main_ansible/group_vars/all/admin_access.yaml
#

#
# Set the admin_username separate from the root user account
# and use a randomly chosen high admin_ssh_port.
# Keep these private to service administration.
#
#admin_username:
#admin_fullname:
#admin_email:
#admin_ssh_port:
#admin_authorized_keys:
#  - ssh-rsa ADUMMYZGBlQ2nEaEClBlOswkWe6Rx61Nvck+ye3hjQZHp2CdHpuN1lgLPKo3hvdkRHTU8rh7CFMbPPqJI/zI/8CpcOoBhX3qU5hZJJrmJRckqhyWOQpru2L5COBOWHC1SGyBEXAMPLE johndoe@acs.example.com-2014-08-24T20:25:09Z

#
# On CentOS or Fedora, to create a PBKDF2 protected password, you can use:
# grub2-mkpasswd-pbkdf2
#
#host_bootpw_pbkdf2:

#
# Administrative account
#

- name: Set the hostname
  when: hostname is defined
  become: yes
  command: hostnamectl set-hostname {{ hostname }}
  ignore_errors: yes

- name: Create the admin SSH account
  user:
    name: "{{ admin_username }}"
    comment: "{{ admin_fullname }}"
    append: yes
    groups: wheel
    shell: /bin/bash
    generate_ssh_key: yes
    ssh_key_comment: "{{ admin_username }}@{{ ansible_fqdn }}-{{ ansible_date_time.iso8601 }}"
    state: present

- name: Authorize SSH keys
  template:
    src: "authorized_keys.j2"
    dest: "/home/{{ admin_username }}/.ssh/authorized_keys"
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: 0600

- name: Configure Git
  template:
    src: "gitconfig.j2"
    dest: "/home/{{ admin_username }}/.gitconfig"
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: 0664

- name: Configure sudoers
  with_items:
  - regexp: '^%wheel\s+ALL='
    line: '%wheel ALL=(ALL) NOPASSWD:ALL'
  - regexp: '^Defaults\s+secure_path'
    line: 'Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin'
# Enable sudo without teletype terminal
  - regexp: '^Defaults\s+!?requiretty'
    line: 'Defaults    !requiretty'
  lineinfile:
    dest: "/etc/sudoers"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    validate: 'visudo -qcf %s'

- name: Prevent entering interactive boot
  lineinfile:
    dest: "/etc/sysconfig/init"
    regexp: '^\s*PROMPT'
    line: "PROMPT=no"
    state: present

- name: Require boot-time password for single user mode
  become: yes
  lineinfile:
    dest: /etc/grub.d/40_custom
    regexp: '^\s*set superusers'
    line: "set superusers=\"{{ admin_username }}\""
    state: present

- name: Set the boot-time password
  become: yes
  lineinfile:
    dest: /etc/grub.d/40_custom
    regexp: '^\s*password_pbkdf2'
    insertafter: '^\s*set superusers'
    line: "password_pbkdf2 {{ admin_username }} {{ host_bootpw_pbkdf2 }}"
    state: present
  register: boot_password

- name: Make the boot configuration
  when: boot_password is changed
  become: yes
  command: grub2-mkconfig --output=/boot/grub2/grub.cfg

- name: Disallow root SSH access
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin'
    line: "PermitRootLogin no"
    state: present
  notify:
  - Restart sshd

- name: Disallow password authentication
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^PasswordAuthentication'
    line: "PasswordAuthentication no"
    state: present
  notify:
  - Restart sshd

- name: Configure SELinux to allow SSH on the administrative SSH port
  command: semanage port -a -t ssh_port_t -p tcp {{ admin_ssh_port }}
  ignore_errors: yes

- name: Set SSH port
  lineinfile:
    dest: "/etc/ssh/sshd_config"
    regexp: '^Port'
    line: "Port {{ admin_ssh_port }}"
    state: present
  notify:
  - Restart sshd
