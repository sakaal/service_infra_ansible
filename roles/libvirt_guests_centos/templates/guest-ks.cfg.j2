# CentOS 7 KVM guest kickstart configuration {{ ansible_date_time.iso8601 }}
#
# Prepares a guest virtual machine for Ansible configuration management.
#

#
# Do not use the same password elsewhere.
# Change it at first boot inside a private network.
#
rootpw --iscrypted {{ guest_rootpw_sha512 | mandatory }}
authconfig --enableshadow --passalgo=sha512

# Create the admin SSH account
user --name={{ admin_username | mandatory }} --gecos="{{ admin_fullname }}" --groups=wheel --shell=/bin/bash

cmdline
skipx
install
reboot
firstboot --disable

lang {{ hostvars[item].guest_lang | default('en_US.UTF-8') }}
keyboard {{ hostvars[item].guest_keyboard | mandatory }}
timezone {{ hostvars[item].guest_timezone | default('--utc') }}

ignoredisk --only-use=vda
zerombr
clearpart --all --drives=vda --initlabel
bootloader --location=mbr --driveorder=vda

#
# Partitioning plan for 12+ G
#
part /boot --fstype="ext4" --size=512 --maxsize=512 --ondisk=vda
part pv.1 --size=11264 --grow --ondisk=vda
volgroup vg_{{ hostvars[item].guest_vg_name | mandatory }} pv.1
logvol / --fstype="ext4" --size=4096 --maxsize=8192 --name=lv_{{ hostvars[item].guest_vg_name }}_root --vgname=vg_{{ hostvars[item].guest_vg_name }}
logvol /var --fstype="ext4" --size=3072 --maxsize=4096 --name=lv_{{ hostvars[item].guest_vg_name }}_var --vgname=vg_{{ hostvars[item].guest_vg_name }}
logvol swap --fstype="swap" --size=4096 --maxsize=4096 --name=lv_{{ hostvars[item].guest_vg_name }}_swap --vgname=vg_{{ hostvars[item].guest_vg_name }}

#
# Networks
#
network --device=eth0 --bootproto=dhcp --onboot=on --hostname={{ item }}

firewall --enable --service=ssh --port {{ admin_ssh_port | mandatory }}:tcp
services --enabled=sshd,ntpd,acpid
selinux --enforcing

url --url {{ hostvars[item].centos_repo_url | mandatory }}
repo --name="CentOS" --baseurl={{ hostvars[item].centos_repo_url }} --cost=100

%packages --nobase --excludedocs
@core
@security-tools
@web-server
acpid
audit
bind-utils
coreutils
crypto-utils
cryptsetup-luks
dhclient
e2fsprogs
git
gnupg
iptraf
libselinux-python
lvm2
mtr
nano
net-tools
ntp
openssh-clients
openssh-server
openssl
policycoreutils-python
procps
python-setuptools
rpm
screen
strace
sudo
sysstat
tcpdump
vim
wget
yum
-aic94xx-firmware
-atmel-firmware
-b43-openfwwf
-bfa-firmware
-cronie
-cronie-anacron
-crontabs
-cups
-cyrus-sasl
-info
-ipw2100-firmware
-ipw2200-firmware
-ivtv-firmware
-iwl100-firmware
-iwl1000-firmware
-iwl105-firmware
-iwl135-firmware
-iwl2000-firmware
-iwl2030-firmware
-iwl3945-firmware
-iwl4965-firmware
-iwl5000-firmware
-iwl5150-firmware
-iwl6000-firmware
-iwl6000g2a-firmware
-iwl6000g2b-firmware
-iwl6050-firmware
-iwl7260-firmware
-libertas-usb8388-firmware
-mysql-libs
-postfix
-ql2100-firmware
-ql2200-firmware
-ql23xx-firmware
-ql2400-firmware
-ql2500-firmware
-rt61pci-firmware
-rt73usb-firmware
-sendmail
-webalizer
-xorg-x11-drv-ati-firmware
-yum-cron
-yum-utils
-zd1211-firmware
%end

%post --nochroot

cp /etc/resolv.conf /mnt/sysimage/etc/resolv.conf

%end

%post --log=/root/post-log

echo "{{ item }} kickstart configured" >> /etc/motd
date -u +"%FT%TZ %G-W%V-%u %A %y-%j" >> /etc/motd

echo "Installing the Extra Packages for Enterprise Linux (EPEL) repository."
rpm -Uvh {{ hostvars[item].epel_rpm_url | mandatory }}

# Authorize SSH keys
cd /home/{{ admin_username | mandatory }}
mkdir --mode=700 .ssh
ssh-keygen -q -N "" -t rsa -f .ssh/id_rsa -C "{{ admin_username }}@{{ ansible_fqdn }}-{{ ansible_date_time.iso8601 }}"
cat >> .ssh/authorized_keys << "PUBLIC"
{% for authorized_key in admin_authorized_keys %}
{{ authorized_key }}
{% endfor %}
PUBLIC
chown -R {{ admin_username }}:{{ admin_username }} .ssh
chmod 600 .ssh/authorized_keys
restorecon -R .ssh/

# Configure Git
cat >> .gitconfig << "GITCONFIG"
[user]
        name = {{ admin_fullname | mandatory }}
        email = {{ admin_email | mandatory }}
[push]
        default = simple
GITCONFIG
chown {{ admin_username }}:{{ admin_username }} .gitconfig
chmod 664 .gitconfig

# sed 4.2.1 preserves SELinux security contexts:
# http://freecode.com/projects/sed/releases/301607

## Configure sudoers
sed -i 's/^%wheel[ \t]\+ALL=(ALL).*$/%wheel ALL=(ALL) NOPASSWD:ALL/g'\
 /etc/sudoers
echo "Administrative sudo without password enabled"

sed -i 's|^Defaults[ \t]\+secure_path.*$|Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin|g'\
 /etc/sudoers
echo "Set the sudo secure path"

sed -i 's/^Defaults[ \t]\+requiretty[ \t]*$/Defaults    !requiretty/g'\
 /etc/sudoers
echo "Enabled sudo without teletype terminal"

## Disable interactive startup
grep -q -e '^\s*PROMPT' /etc/sysconfig/init ||\
 ( echo "# disable interactive startup"; echo "PROMPT=no"; )\
 >> /etc/sysconfig/init
sed -i 's/PROMPT=yes/PROMPT=no/g' /etc/sysconfig/init
echo "Interactive startup disabled"

## Require password for single user mode
grep -q -e '^\s*set superusers' /etc/grub.d/40_custom || \
cat >> /etc/grub.d/40_custom << EOF
set superusers="{{ admin_username }}"
password_pbkdf2 {{ admin_username }} {{ guest_bootpw_pbkdf2 | mandatory }}
EOF
grub2-mkconfig --output=/boot/grub2/grub.cfg
echo "Required password for single user mode"

## Disable the root shell
#sed -i 's|^root:\(.*\):/bin/bash$|root:\1:/sbin/nologin|g' /etc/passwd
#echo "Disabled the root shell"

## Disable root access via any console
echo > /etc/securetty
echo "Disabled root access via any console"

## Disallow root SSH access
sed -i 's/^#\?PermitRootLogin[ \t]\+yes.*$/PermitRootLogin no/g'\
 /etc/ssh/sshd_config
echo "SSH root login disabled"

## Disallow password authentication
sed -i 's/^PasswordAuthentication[ \t]\+yes.*$/PasswordAuthentication no/g'\
 /etc/ssh/sshd_config
echo "SSH password authentication disabled"

## Configure SELinux to allow SSH on the administrative SSH port
semanage port -a -t ssh_port_t -p tcp {{ admin_ssh_port }}

## Set SSH port
sed -i 's/^#\?Port[ \t]\+22/Port {{ admin_ssh_port }}/g'\
 /etc/ssh/sshd_config
echo "SSH daemon set to a non-standard port"

# TODO: Further hardening according to:
# https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/

yum -y update

##### Begin DNS SSHFP records management #####

echo "Updating DNS SSHFP records via the DynECT API"

#
# Ensure that SSH host keys exist. They're otherwise generated at first boot.
#
ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa
ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa
ssh-keygen -f /etc/ssh/ssh_host_ecdsa_key -N '' -t ecdsa -b 521

DATA_FILE=$(mktemp --tmpdir dynect_sshfp.XXX)

#
# Establish DynECT API session
#
DYNECT_API_URL="{{ dynect_api_url | mandatory }}"
DYNECT_CUSTOMER="{{ dynect_customer | mandatory }}"
DYNECT_API_USER="{{ dynect_api_user | mandatory }}"
DYNECT_API_PASSWORD="{{ dynect_api_password | mandatory }}"
DYNECT_ZONE={{ dns_zone | mandatory }}
cat > "$DATA_FILE" << EOF
{
"customer_name": "$DYNECT_CUSTOMER",
"user_name": "$DYNECT_API_USER",
"password": "$DYNECT_API_PASSWORD"
}
EOF
OUTPUT=$(curl -s -X POST -H 'Content-Type: application/json'\
 $DYNECT_API_URL/Session/ -d @$DATA_FILE)
AUTH_TOKEN=$(echo $OUTPUT |\
 sed -e 's/.*"token"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/g')

#
# Delete old DNS SSHFP records (if any)
#
curl -s -o /dev/null -w "%{http_code} %{url_effective} DELETE\\n"\
 -X DELETE -H 'Content-Type: application/json' -H "Auth-Token: $AUTH_TOKEN"\
 $DYNECT_API_URL/SSHFPRecord/$DYNECT_ZONE/$(hostname)/

#
# Make the new DNS SSHFP records
#
while read record
do
ALGORITHM=$(echo $record |\
 sed -e 's/^[^ ]\+ IN SSHFP \([^ ]*\) .*$/\1/g')
FPTYPE=$(echo $record |\
 sed -e 's/^[^ ]\+ IN SSHFP [[:digit:]] \([^ ]*\) .*$/\1/g')
FINGERPRINT=$(echo $record |\
 sed -e 's/^[^ ]\+ IN SSHFP [[:digit:]] [[:digit:]] \([^ ]*\)$/\1/g')
cat > "$DATA_FILE" << EOF
{"rdata":{
"algorithm":"$ALGORITHM",
"fptype":"$FPTYPE",
"fingerprint":"$FINGERPRINT"
}}
EOF
curl -s -o /dev/null\
 -w "%{http_code} %{url_effective} $ALGORITHM $FPTYPE $FINGERPRINT\\n"\
 -X POST -H 'Content-Type: application/json' -H "Auth-Token: $AUTH_TOKEN"\
 $DYNECT_API_URL/SSHFPRecord/$DYNECT_ZONE/$(hostname)/ -d @$DATA_FILE
done <<< "$(ssh-keygen -r $(hostname))"

# Publish DNS zones
curl -s -o /dev/null -w "%{http_code} %{url_effective} PUBLISH\\n"\
 -X PUT -H 'Content-Type: application/json' -H "Auth-Token: $AUTH_TOKEN"\
 $DYNECT_API_URL/Zone/$DYNECT_ZONE -d '{"publish":true}'

rm -f $DATA_FILE

# End the DynECT session
curl -s -o /dev/null -w "%{http_code} %{url_effective} END\\n"\
 -X DELETE -H 'Content-Type: application/json' -H "Auth-Token: $AUTH_TOKEN"\
 $DYNECT_API_URL/Session/

##### End DNS SSHFP records management #####



%end
