# file: roles/hetzner_robot_server_market/tasks/main.yaml
#
# You must manually activate the Hetzner Robot Webservice ordering feature
# before using this script.
#
# Compare the pricing data for example to:
# https://www.hetzner.com/flexipack/
#
# The server details, especially special configurations of HDDs and SSDs
# on the same server, are not always reported consistently. Always check
# the results manually.
#
---

- name: Target inventory file for new servers
  local_action:
    module: stat
    path: "{{ inventory_file }}"
    get_mime: yes
  register: target_inventory_file

- name: Sanity check the target inventory file
  assert:
    that:
    - target_inventory_file.stat.isreg
    - target_inventory_file.stat.writeable
    - target_inventory_file.stat.mimetype in [ 'text/plain' ]
    - target_inventory_file.stat.charset
      in [ 'us-ascii', 'utf-8', 'iso-8859-1' ]
    msg: "{{ inventory_file }} does not look like an Ansible inventory file."

- name: Safety check to avoid repeated server market orders
  local_action:
    module: uri
    method: GET
    url: "{{ hetzner_api_url }}/order/server/transaction"
    user: "{{ hetzner_api_user }}"
    password: "{{ hetzner_api_password }}"
    status_code: 200,404
    return_content: yes
  register: hetzner_robot_transactions
  changed_when: hetzner_robot_transactions.status != 404

- name: Stop if any server market transaction still in progress
  with_items: "{{ hetzner_robot_transactions.json }}"
  when: hetzner_robot_transactions is changed and
        item.transaction.status not in [ "cancelled" ]
  fail:
    msg: "ACTIVE TRANSACTION {{ item.transaction }}"

- name: Benefit-cost evaluation criteria
  set_fact:
    server_market_per_euro:
      traffic_TB: 2.0
      cpu_benchmark: 1000.0
      memory_GB: 2.0
      hdd_GB: 340.0
    server_market_factor:
      ent_hdd: 0.05
      ecc:     0.10
      inic:    0.05
      red_ps:  0.10
      hwr:     0.05
      ssd:     0.15
      sas:     0.03
      kvm:     0.03

- name: Search criteria
  set_fact:
    server_order_count: 2
    server_market:
      memory:
        min: 32
      price:
        max: 35
      hdd_count:
        min: 2
      cpu_benchmark:
        min: 6000
      datacenter:
        pattern: '^HEL.*$'
#      search: "RED.PS" # Red.PS Ent.HDD ECC HWR INIC "SSD" SAS KVM

- name: Check currently offered server market products
  local_action:
    module: uri
    method: GET
    url: "{{ hetzner_api_url }}/order/server_market/product?max_price={{ server_market.price.max
          }}&min_hdd_count={{ server_market.hdd_count.min
          }}&min_memory_size={{ server_market.memory.min
          }}&min_cpu_benchmark={{ server_market.cpu_benchmark.min
          }}{% if server_market.search is defined
            %}&search={{ server_market.search
          }}{% endif %}"
    user: "{{ hetzner_api_user }}"
    password: "{{ hetzner_api_password }}"
    status_code: 200
    return_content: yes
  register: hetzner_robot_server_market

- name: Filter results by datacenter
  set_fact:
    hetzner_robot_server_market: "{{ hetzner_robot_server_market.json
                                   | selectattr('product.datacenter', 'match', server_market.datacenter.pattern)
                                   | list }}"

- name: Evaluate all matching servers
  with_items: "{{ hetzner_robot_server_market }}"
  set_fact:
    value: "{{ (
        (item.product.traffic.split()[0]|float / server_market_per_euro.traffic_TB)
      + (item.product.cpu_benchmark|float / server_market_per_euro.cpu_benchmark)
      + (item.product.memory_size|float / server_market_per_euro.memory_GB)
      + ((item.product.hdd_count|float - 1) * item.product.hdd_size|float / server_market_per_euro.hdd_GB)
      ) * ( 1.0
      + (server_market_factor.ent_hdd if 'ENT.HDD' in item.product.hdd_text else 0)
      + (server_market_factor.ecc     if 'ECC' in item.product.hdd_text else 0)
      + (server_market_factor.inic    if 'INIC' in item.product.hdd_text else 0)
      + (server_market_factor.red_ps  if 'Red.PS' in item.product.cpu else 0)
      + (server_market_factor.hwr     if 'HWR' in item.product.hdd_text else 0)
      + (server_market_factor.ssd     if 'SSD' in item.product.hdd_text else 0)
      + (server_market_factor.sas     if 'SAS' in item.product.hdd_text else 0)
      + (server_market_factor.kvm     if 'KVM' in item.product.hdd_text else 0)
      ) | round(2)
      }}"
    benefit_cost_ratio: "{{ (
        (item.product.traffic.split()[0]|float / server_market_per_euro.traffic_TB)
      + (item.product.cpu_benchmark|float / server_market_per_euro.cpu_benchmark)
      + (item.product.memory_size|float / server_market_per_euro.memory_GB)
      + ((item.product.hdd_count|float - 1) * item.product.hdd_size|float / server_market_per_euro.hdd_GB)
      ) * ( 1.0
      + (server_market_factor.ent_hdd if 'ENT.HDD' in item.product.hdd_text else 0)
      + (server_market_factor.ecc     if 'ECC' in item.product.hdd_text else 0)
      + (server_market_factor.inic    if 'INIC' in item.product.hdd_text else 0)
      + (server_market_factor.red_ps  if 'Red.PS' in item.product.cpu else 0)
      + (server_market_factor.hwr     if 'HWR' in item.product.hdd_text else 0)
      + (server_market_factor.ssd     if 'SSD' in item.product.hdd_text else 0)
      + (server_market_factor.sas     if 'SAS' in item.product.hdd_text else 0)
      + (server_market_factor.kvm     if 'KVM' in item.product.hdd_text else 0)
      )
      / item.product.price|float | round(2)
      }}"
  register: hetzner_market_evaluation

- name: Sort matching servers by benefit-cost ratio
  set_fact:
    hetzner_market_evaluation: "{{ hetzner_market_evaluation.results
                                 | sort(attribute='ansible_facts.benefit_cost_ratio', reverse=True)
                                 | list }}"

- name: Order the top servers by benefit-cost ratio
  with_items: "{{ hetzner_market_evaluation[0:server_order_count] }}"
  local_action:
    module: uri
    method: POST
    url: "{{ hetzner_api_url }}/order/server_market/transaction"
    user: "{{ hetzner_api_user }}"
    password: "{{ hetzner_api_password }}"
    headers:
      Content-Type: "application/x-www-form-urlencoded"
    body: "test=true&product_id={{ item.item.product.id
           }}{% for ssh_id in hetzner_robot_existing_keys.json
             %}&authorized_key[]={{ ssh_id.key.fingerprint
           }}{% endfor %}"
    status_code: 201
    return_content: yes
  register: hetzner_server_market_order

- name: Create transaction tickets as YAML files
  with_items: "{{ hetzner_server_market_order.results }}"
  local_action:
    module: copy
    dest: "{{ inventory_dir }}/hetzner_transaction_{{ item.json.transaction.id }}.yaml~"
    content: |-
      # file: hetzner_transaction_{{ item.json.transaction.id }}.yaml
      ---
      {{ item.json | to_nice_yaml(indent=2) }}
      product:
      {{ item.item.item.product | to_nice_yaml(indent=2) | indent(2, true) }}
        evaluation:
      {{ item.item.ansible_facts | to_nice_yaml(indent=2) | indent(4, true) }}
