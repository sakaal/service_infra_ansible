# file: roles/hetzner_robot_server_market/tasks/main.yaml
#
# You must manually activate the Hetzner Robot Webservice ordering feature
# before using this script.
#
# Compare the pricing data for example to:
# https://www.hetzner.com/flexipack/
#
# The server details, especially special configurations of HDDs and SSDs
# on the same server, are not always reported consistently. Always check
# the results manually.
#
---

- name: Target inventory file for new servers
  local_action:
    module: stat
    path: "{{ inventory_file }}"
    get_mime: yes
  register: target_inventory_file

- name: Sanity check the target inventory file
  assert:
    that:
    - target_inventory_file.stat.isreg
    - target_inventory_file.stat.writeable
    - target_inventory_file.stat.mimetype in [ 'text/plain' ]
    - target_inventory_file.stat.charset
      in [ 'us-ascii', 'utf-8', 'iso-8859-1' ]
    msg: "{{ inventory_file }} does not look like an Ansible inventory file."

- name: Safety check to avoid repeated server market orders
  local_action:
    module: uri
    method: GET
    url: "{{ hetzner_api_url }}/order/server/transaction"
    user: "{{ hetzner_api_user }}"
    password: "{{ hetzner_api_password }}"
    status_code: 200,404
    return_content: yes
  register: hetzner_robot_transactions
  changed_when: hetzner_robot_transactions.status != 404

- name: Stop if any server market transaction still in progress
  with_items: "{{ hetzner_robot_transactions.json }}"
  when: hetzner_robot_transactions is changed and
        item.transaction.status not in [ "cancelled" ]
  fail:
    msg: "ACTIVE TRANSACTION {{ item.transaction }}"

- name: Check currently offered server market products
  local_action:
    module: uri
    method: GET
    url: "{{ hetzner_api_url }}/order/server_market/product?max_price={{ server_market.price.max
          }}&min_hdd_count={{ server_market.hdd_count.min
          }}&min_memory_size={{ server_market.memory.min
          }}&min_cpu_benchmark={{ server_market.cpu_benchmark.min
          }}{% if server_market.search is defined
            %}&search={{ server_market.search
          }}{% endif %}"
    user: "{{ hetzner_api_user }}"
    password: "{{ hetzner_api_password }}"
    status_code: 200
    return_content: yes
  register: hetzner_robot_server_market

- name: Filter results by datacenter
  set_fact:
    hetzner_robot_server_market: "{{ hetzner_robot_server_market.json
                   | selectattr('product.datacenter',
                                'match', server_market.datacenter.pattern)
                   | list }}"

- name: Record the date and time
  set_fact:
    current_date_time: "{{ lookup('pipe', 'date +%Y-%m-%d_%H%M%Z') }}"

- name: Generate the server market analysis report (YAML)
  local_action:
    module: template
    src: "market_analysis.yaml.j2"
    dest: "{{ inventory_dir
           }}/hetzner_server_market_{{ current_date_time }}_analysis.yaml"

- name: Read the server market analysis report
  local_action:
    module: include_vars
    file: "{{ inventory_dir
           }}/hetzner_server_market_{{ current_date_time }}_analysis.yaml"
    name: hetzner_robot

- name: Generate the server market evaluation report (YAML)
  local_action:
    module: template
    src: "market_evaluation.yaml.j2"
    dest: "{{ inventory_dir
           }}/hetzner_server_market_{{ current_date_time }}_evaluation.yaml"

- name: Read the server market evaluation report
  local_action:
    module: include_vars
    file: "{{ inventory_dir
           }}/hetzner_server_market_{{ current_date_time }}_evaluation.yaml"
    name: hetzner_robot

- name: Generate the server market comparison report (YAML)
  local_action:
    module: template
    src: "market_comparison.yaml.j2"
    dest: "{{ inventory_dir
           }}/hetzner_server_market_{{ current_date_time }}_comparison.yaml"

- name: Read the server market comparison report
  local_action:
    module: include_vars
    file: "{{ inventory_dir
           }}/hetzner_server_market_{{ current_date_time }}_evaluation.yaml"
    name: hetzner_robot

- name: Sort the servers by benefit-cost ratio
  set_fact:
    hetzner_market_evaluation: "{{ hetzner_robot.server_market_analysis
        | sort(attribute='product.benefit_cost_ratio', reverse=True)
        | list }}"

- name: Generate the server market evaluation report (HTML)
  local_action:
    module: template
    src: "server_market.html.j2"
    dest: "{{ inventory_dir
           }}/hetzner_server_market_{{ current_date_time }}.html"

- name: Order the top servers by benefit-cost ratio
  with_items: "{{ hetzner_market_evaluation[0:server_order_count] }}"
  local_action:
    module: uri
    method: POST
    url: "{{ hetzner_api_url }}/order/server_market/transaction"
    user: "{{ hetzner_api_user }}"
    password: "{{ hetzner_api_password }}"
    headers:
      Content-Type: "application/x-www-form-urlencoded"
    body: "{% if server_order_dry_run | default(True) | bool
           %}test=true&{% endif
           %}product_id={{ item.product.id
           }}{% for ssh_id in hetzner_robot_existing_keys.json
             %}&authorized_key[]={{ ssh_id.key.fingerprint
           }}{% endfor %}"
    status_code: 201
    return_content: yes
  register: hetzner_server_market_order

- name: Create transaction tickets as YAML files
  with_items: "{{ hetzner_server_market_order.results }}"
  local_action:
    module: copy
    dest: "{{ inventory_dir
           }}/hetzner_transaction_{{ item.json.transaction.id }}.yaml{%
           if server_order_dry_run | default(True) | bool %}~{% endif %}"
    content: |-
      # file: hetzner_transaction_{{ item.json.transaction.id }}.yaml
      ---
      {{ item.json | to_nice_yaml(indent=2) }}
      product:
      {{ item.item.product | to_nice_yaml(indent=2) | indent(2, true) }}
